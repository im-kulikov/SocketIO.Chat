#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat.kulikov.im:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server and SocketIO.
 */

var server = http.Server(app);
var session = require("express-session")({
  secret: "socket.io-session",
  resave: true,
  saveUninitialized: true
});
var sharedsession = require("express-socket.io-session");
var io = require('socket.io')(server);

/**
 * Use express-session middleware for express:
 */
app.use(session);

// Use shared session middleware for socket.io
// setting autoSave:true
io.use(sharedsession(session, {
  autoSave:true
}));

/**
 * Configure Socket Events:
 */

var user_count = 0;
var messages = [];

/**
 * Request for all messages:
 */
var getAllMessages = function() {
  app.locals.redis.lrange('messages', 0, 100, function(err, reply) {

    if (!err) {
      var result = [];
      // Циклический обход списка с разбором каждого элемента в объект
      for(var msg in reply) result.push(JSON.parse(reply[msg]));

      messages = result;

    }

  });

};

io.on('connection', function(socket){

  var username = '';

  socket.on('join', function(data) {

    username = data;

    var msg = {
      message: 'Вошёл пользователь: ' + data + '; в чате - ' + Object.keys(io.sockets.connected).length + ' чел.',
      name: 'ChatBot',
      date: new Date()
    };

    io.emit('new message', msg);

    app.locals.redis.lpush('messages', JSON.stringify(msg));

  });

  socket.on('change name', function(data) {

    var old_name = username;
    username = data;

    var msg = {
      message: 'Пользователь: ' + old_name + ' сменил имя на ' + username,
      name: 'ChatBot',
      date: new Date()
    };

    io.emit('new message', msg);

    app.locals.redis.lpush('messages', JSON.stringify(msg));

  });

  socket.on('disconnect', function(data) {
    var msg = {
      message: 'Вышел пользователь: ' + username + '; в чате - ' + Object.keys(io.sockets.connected).length + ' чел.',
      name: 'ChatBot',
      date: new Date()
    };

    io.emit('new message', msg);

    app.locals.redis.lpush('messages', JSON.stringify(msg));

  });

  user_count += 1;

  socket.on('new message', function(msg){
    console.log(msg);

    app.locals.redis.lpush('messages', JSON.stringify(msg));

    io.emit('new message', msg);

    getAllMessages();
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
